{"version":3,"sources":["Comment.js","actions.js","CommentContainer.js","CommentsList.js","CommentsListContainer.js","FormContainer.js","App.js","serviceWorker.js","comments.js","users.js","form.js","reducer.js","index.js"],"names":["Comment","_ref","text","votes","id","thumbUpComment","thumbDownComment","removeComment","editComment","react_default","a","createElement","className","onClick","index_es","icon","ADD_COMMENT","REMOVE_COMMENT","EDIT_COMMENT","THUMB_UP_COMMENT","THUMB_DOWN_COMMENT","UPDATE_COMMENT","addComment","type","uuid","v4","connect","dispatch","CommentsList","comments","map","comment","CommentContainer","Object","assign","key","state","CommentForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","form","event","target","value","preventDefault","props","updateComment","_this2","onSubmit","handleSubmit","rows","onChange","handleChange","handleUpdate","clear","Component","library","add","faThumbsUp","faThumbsDown","faTrash","faEdit","App","CommentsListContainer","FormContainer","Boolean","window","location","hostname","match","arguments","length","undefined","action","concat","toConsumableArray","objectSpread","filter","users","initialState","reducer","combineReducers","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62a87d26.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './Comment.css';\r\n\r\nexport const Comment = ({ text, votes, id, thumbUpComment, thumbDownComment, removeComment, editComment }) =>\r\n    <li className=\"Comment\">\r\n        {text}\r\n        <span className=\"votes\"> votes: {votes}</span>\r\n        <div className=\"comment-menu\">\r\n        <button onClick={() => thumbUpComment(id)}><FontAwesomeIcon icon=\"thumbs-up\" /></button>\r\n        <button onClick={() => thumbDownComment(id)}><FontAwesomeIcon icon=\"thumbs-down\" /></button>\r\n        <button onClick={() => removeComment(id)}><FontAwesomeIcon icon=\"trash\" /></button>\r\n        <button onClick={() => editComment(id, text)}><FontAwesomeIcon icon=\"edit\" /></button>\r\n        </div>\r\n    </li>;\r\n\r\nexport default Comment;","import uuid from 'uuid';\r\n\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const REMOVE_COMMENT = 'REMOVE_COMMENT';\r\nexport const EDIT_COMMENT = 'EDIT_COMMENT';\r\nexport const THUMB_UP_COMMENT = 'THUMB_UP_COMMENT';\r\nexport const THUMB_DOWN_COMMENT = 'THUMB_DOWN_COMMENT';\r\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT';\r\n\r\nexport function addComment(text) {\r\n    return {\r\n        type: ADD_COMMENT,\r\n        text,\r\n        id: uuid.v4()\r\n    }\r\n}\r\n\r\nexport function editComment(id, text) {\r\n    return {\r\n        type: EDIT_COMMENT,\r\n        id,\r\n        text\r\n    }\r\n}\r\n\r\nexport function updateComment(id, text) {\r\n    return {\r\n      type: UPDATE_COMMENT,\r\n      id,\r\n      text\r\n    };\r\n  }\r\n\r\nexport function removeComment(id) {\r\n    return {\r\n        type: REMOVE_COMMENT,\r\n        id\r\n    }\r\n}\r\n\r\nexport function thumbUpComment(commentId) {\r\n    return {\r\n        type: THUMB_UP_COMMENT,\r\n        id: commentId\r\n    }\r\n}\r\n\r\nexport function thumbDownComment(commentId) {\r\n    return {\r\n      type: THUMB_DOWN_COMMENT,\r\n      id: commentId\r\n    }\r\n  }\r\n\r\n","import { connect } from 'react-redux';\r\nimport Comment from './Comment';\r\nimport { thumbUpComment, thumbDownComment, removeComment, editComment } from './actions'\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    thumbUpComment: (id) => dispatch(thumbUpComment(id)),\r\n    thumbDownComment: (id) => dispatch(thumbDownComment(id)),\r\n    removeComment: (id) => dispatch(removeComment(id)),\r\n    editComment: (id, text) => dispatch(editComment(id, text)),\r\n  });\r\n\r\nexport default connect(null, mapDispatchToProps)(Comment);","import React from 'react';\r\nimport Comment from './CommentContainer';\r\nimport './CommentsList.css';\r\n\r\nconst CommentsList = ({ comments }) => <ul className=\"CommentsList\">{comments.map(comment => <Comment key={comment.id} {...comment} />)}</ul>;\r\n\r\nexport default CommentsList;","import { connect } from 'react-redux';\r\nimport CommentsList from './CommentsList';\r\n\r\nconst mapStateToProps = state => ({\r\n    comments: state.comments\r\n});\r\n\r\nexport default connect(mapStateToProps)(CommentsList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Form.css';\r\nimport {\r\n    addComment,\r\n    updateComment\r\n} from './actions.js';\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addComment: text => dispatch(addComment(text)),\r\n        updateComment: (id, text) => dispatch(updateComment(id, text))\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    comments: state.comments,\r\n    form: state.form\r\n});\r\n\r\nclass CommentForm extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            text: '',\r\n            id: ''\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(e) {\r\n        this.setState({\r\n            text: e.form.text,\r\n            id: e.form.id\r\n        })\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ text: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.addComment(this.state.text);\r\n        this.setState({ text: '' });\r\n    }\r\n\r\n    handleUpdate(event) {\r\n        \r\n        event.preventDefault();\r\n        this.props.updateComment(\r\n            this.state.id, this.state.text\r\n        );\r\n    }\r\n\r\n    clear(event) {\r\n        this.setState({\r\n            text: ''\r\n        })\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={(e) => this.handleSubmit(e)} className='Form'>\r\n                <div>\r\n                    <textarea\r\n                        rows='7'\r\n                        value={this.state.text}\r\n                        onChange={(e) => this.handleChange(e)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>Add comment</button>\r\n                    <button\r\n                        onClick={(e) => this.handleUpdate(e)}> Edit comment </button>\r\n                    <button\r\n                        onClick={(e) => this.clear(e)}> Clear </button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentForm);","import React from 'react';\r\nimport CommentsListContainer from './CommentsListContainer';\r\nimport FormContainer from './FormContainer';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faThumbsUp, faThumbsDown, faTrash, faEdit } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nlibrary.add(faThumbsUp, faThumbsDown, faTrash, faEdit)\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1> The comments app.</h1>\r\n      <h2> The comments list:</h2>\r\n      <CommentsListContainer />\r\n      <h2>Write your comment here:</h2>\r\n      <FormContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  ADD_COMMENT,\r\n  REMOVE_COMMENT,\r\n  THUMB_DOWN_COMMENT,\r\n  THUMB_UP_COMMENT,\r\n  UPDATE_COMMENT\r\n} from './actions';\r\n\r\nfunction comments(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_COMMENT:\r\n      return [\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          votes: 0\r\n        },\r\n        ...state\r\n      ];\r\n\r\n    case UPDATE_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id && action.text !== \"\") {\r\n          return { ...comment, text: action.text };\r\n        }\r\n        return comment;\r\n      });\r\n      \r\n    case REMOVE_COMMENT:\r\n      return state.filter(comments => comments.id !== action.id);\r\n\r\n    case THUMB_UP_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id) {\r\n          return { ...comment, votes: comment.votes + 1 };\r\n        }\r\n        return comment;\r\n      });\r\n\r\n    case THUMB_DOWN_COMMENT:\r\n      return state.map(comment => {\r\n        if (comment.id === action.id) {\r\n          return { ...comment, votes: comment.votes - 1 };\r\n        }\r\n        return comment;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default comments;\r\n","function users(state = [], action) {\r\n    return state;\r\n}\r\n\r\nexport default users;","import {\r\n    EDIT_COMMENT\r\n} from './actions';\r\n\r\nconst initialState = {\r\n   text: '',\r\n    id:''\r\n};\r\n\r\nfunction form(state = initialState, action) {\r\n    switch (action.type) {\r\n        case EDIT_COMMENT:\r\n            return {\r\n                id: action.id,\r\n                text: action.text\r\n            }\r\n        default:\r\n            return initialState;\r\n    }\r\n}\r\n\r\nexport default form;","import { combineReducers } from 'redux';\r\nimport comments from './comments';\r\nimport users from './users';\r\nimport form from './form';\r\n\r\nexport const reducer = combineReducers({\r\n    comments,\r\n    users,\r\n    form\r\n  });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport { addComment } from './actions';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\nstore.dispatch(addComment('pierwszy komentarz'));\nstore.dispatch(addComment('drugi komentarz'));\n\n\n"],"sourceRoot":""}